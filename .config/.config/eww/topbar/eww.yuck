;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; POLLS AND LISTENING VARS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;listen on time/date
(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")
(defpoll month :interval "24h" 
  "date '+%b'")
(defpoll day :interval "24h"
  "date '+%d'")
(defpoll hour :interval "1m"
  "date '+%H'")
(defpoll minute :interval "10s"
  "date '+%M'")
 
;;listen on wifi
(defpoll wifi-is_up :interval "1s" "bash ~/.config/scripts/eww/wifi is_up")
(defpoll wifi-name :interval "1min" "bash ~/.config/scripts/eww/wifi name")
(defpoll wifi-strength :interval "10s" "bash ~/.config/scripts/eww/wifi strength")
;;(defpoll wifi-dl_rate :interval "10s" "bash ~/.config/scripts/eww/wifi dl_rate")

;;listen on battery
(defpoll battery :interval "1s"	"bash ~/.config/scripts/eww/battery icon")
(defpoll battery-cappacity :interval "1s" "bash ~/.config/scripts/eww/battery percent")

;;listen on brightness
(defpoll bright :interval "1s" "bash  ~/.config/scripts/eww/calc_bright_percent")
(defvar br_show false)

;;listen on audio volume
(defpoll vol :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll unmuted :interval "1s" "bash ~/.config/scripts/eww/extract_text capture") 
(defvar vol_show false)

;;listen on mic volume
(defpoll unsilenced :interval "1s" "bash ~/.config/scripts/eww/extract_text master")
(defvar mic_show false)
(defpoll mic_vol :interval "1s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")

;;listen on pending updates
(defpoll pac_updates :interval "1h" "pacman -Qu | wc -l")
;;(defpoll yay_updates : interval "1h" 
;;listen on workspaces
(deflisten workspaces :initial "[]" "bash ~/.config/scripts/eww/get_workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/scripts/eww/get_active_workspace")

;;load eww into path
(defvar eww "~/eww/target/release/eww -c ~/.config/eww")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; WINDOWS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow top
    :monitor 0
    :geometry (geometry :x "0%" :y "0%" :width "100%" :height "3%"
                        :anchor "top center")
    :stacking "fg"
    :exclusive "true"
    (top)) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; WIDGETS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget top []
  (box :class "top" :orientation "h" 
    (top-left)
    (top-center)
    (top-right)))

(defwidget top-left []
  (box :orientation "h" :space-evenly false :halign "start" :class "top-left" 
    (workspaces)
    (seperator)))

(defwidget top-center []
  (box :orientation "h" :space-evenly false :halign "center" :class "top-center"
  (time)))

(defwidget top-right []
  (box :orientation "h" :halign "end" :class "top-right" :spacing 16 
       :space-evenly "false"
    (seperator)
    (show_updates)   
    (seperator) 
    (vol)
    (seperator)
    (mic)
    (seperator)
    (bright)
    (seperator)
    (wifi)
    (seperator)
    (bat)))

;;dynamic workspaces (copied from hyprland docs maybe change names from ws's)
(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/scripts/eww/change_active_workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :class "workspace" :space-evenly true :spacing 4
    (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label  :text "${workspace.id}")))))))

(defwidget bat []
  (box :orientation "h" 
    (label :class "bat" :text battery :tooltip "Battery: ${battery-cappacity}%")))

(defwidget time []
  (box :orientation "h" :class "time" 
    (button :onclick "bash ~/.config/scripts/eww/open_calendar" time)))
 
(defwidget seperator []
  (label :class "sep" :text "|"))

(defwidget wifi []
  (box :orientation "h" 
       :tooltip {wifi-name + " (" + wifi-strength + ")"}
    (button :onclick "bash ~/.config/scripts/eww/wifi nmtui" 
            :class "wifi-icon" {wifi-is_up ? "" : "󰖪" }))) 

(defwidget bright []
  (eventbox :onhover "${eww} update br_show=true" 
            :onhoverlost "${eww} update br_show=false"
    (box :class "bright-box" :space-evenly "false" :orientation "h" :spacing 8 
      (label :text {bright+" "})
     	(revealer :transition "slideleft" :reveal br_show :duration "350ms"
	     (scale :class "brightctl" :value bright :orientation "h":max 100 :min 0
                :onchange {br_show ? "xbacklight -set {}" : ""} )))))

(defwidget vol []
  (eventbox :onhover "${eww} update vol_show=true" 
            :onhoverlost "${eww} update vol_show=false"
    (box :class "vol-box" :space-evenly "false" :orientation "h" :spacing 4 
      (button :onclick "amixer set Master toggle" 
              :class "volume-icon" { unsilenced ? vol + " 󰕾" : "󰖁"})    
      (revealer :transition "slideleft" :reveal vol_show :duration "350ms"
      (scale :value vol :orientation "h" :max 100 :min 0 :onchange "amixer set Master {}%")))))


(defwidget mic []
  (eventbox :onhover "${eww} update mic_show=true" 
            :onhoverlost "${eww} update mic_show=false"
    (box :class "mic-box" :space-evenly "false" :orientation "h" :spacing 2 
      (button :onclick "amixer set Capture toggle" 
              :class "mic-icon" { unmuted ? mic_vol+ " " : ""})    
      (revealer :transition "slideleft" :reveal mic_show :duration "350ms"
      (scale :value mic_vol :orientation "h" :max 100 :min 0 :onchange "amixer set Capture {}%")))))

(defwidget test []
  (eventbox :onhover "${eww} update vol_show=true" 
            :onhoverlost "${eww} update vol_show=false" 
    (box :class "bright-box" :space-evenly "false" :orientation "h" :spacing 18
      (label :text {vol_show ? " " : unsilenced ? vol+" 󰕾" : "󰖁"})
      ;;(label :text {vol_show ? "" : unmuted ? mic_vol+ " " : ""})  
      (revealer :transition "slideleft" :reveal vol_show :duration "350ms"
        (box :space-evenly "false" :orientation "h"
          (button :onclick "amixer set Master toggle" 
                  :class "volume-icon" { unsilenced ? "󰕾" : "󰖁"})
	      (scale :class "volctl" :value vol :orientation "h" :max 100 :min 0
                 :onchange "amixer set Master {}%" )
          (button :onclick "amixer set Capture toggle" 
                  :class "mic-icon" { unmuted ? " " : " "})
          (scale :class "micctl" :value mic_vol :orientation "h" :max 100 :min 0
            :onchange "amixer set Capture {}%"))))))

(defwidget show_updates []
  (box :space-evenly "false" :orientation "h"
  pac_updates))
