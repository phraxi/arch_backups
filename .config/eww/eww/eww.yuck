;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; POLLS AND LISTENING VARS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;listen on time/date
(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")
(defpoll month :interval "24h" 
  "date '+%b'")
(defpoll day :interval "24h"
  "date '+%d'")
(defpoll hour :interval "1m"
  "date '+%H'")
(defpoll minute :interval "10s"
  "date '+%M'")
 
;;listen on wifi
(defpoll wifi-icon :interval "1s" "bash ~/.config/scripts/eww/wifi icon")
(defpoll wifi-name :interval "1s" "bash ~/.config/scripts/eww/wifi name")

;;listen on battery
(defpoll battery :interval "1s"	"bash ~/.config/scripts/eww/battery icon")
(defpoll battery-cappacity :interval "1s" "bash ~/.config/scripts/eww/battery percent")

;;listen on brightness
(defpoll bright :interval "1s" "bash  ~/.config/scripts/eww/calc_bright_percent")
(defvar br_show false)

;;listen on audio volume
(defpoll vol :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll mic_vol :interval "1s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll unmuted :interval "1s" "bash ~/.config/scripts/eww/extract_text capture") 
(defpoll unsilenced :interval "1s" "bash ~/.config/scripts/eww/extract_text master")
(defvar vol_show false)


;;listen on workspaces
(deflisten workspaces :initial "[]" "bash ~/.config/scripts/eww/get_workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/scripts/eww/get_active_workspace")

;;load eww into path
(defvar eww "~/eww/target/release/eww -c ~/.config/eww")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; WINDOWS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow top
    :monitor 0
    :geometry (geometry :x "0%" :y "0%" :width "100%" :height "3%"
                        :anchor "top center")
    :stacking "fg"
    (top)) 

(defwindow bottom
    :monitor 0
    :geometry (geometry :x "0%" :y "0%" :width "100%" :height "3%" 
                        :anchor "bottom center")
    :stacking "fg"
    :exclusive "true"
    (launchbar))

(defwindow cal
    :monitor 0
    :geometry (geometry :x "77%" :y "5%" :width "20%" :height "10%")
    :stacking "fg"
    :exclusive "true"
    (cal)) 

(defwindow powermenu
    :monitor 0 
    :geometry (geometry :x "0%" :y "0%" :width "20%" :height "10%"
                        :anchor "bottom right")
    :stacking "fg"
    (powermenu))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; WIDGETS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget top []
  (box :class "top" :orientation "h" 
  (top-left)
  (top-center)
  (top-right)))

(defwidget top-left []
  (box :orientation "h" :space-evenly false :halign "start" :class "top-left" 
  (workspaces)))

(defwidget top-center []
  (box :orientation "h" :space-evenly false :halign "center" :class "top-center"
  (time)))

(defwidget top-right []
  (box :orientation "h" :halign "end" :class "top-right" :spacing 16 
       :space-evenly "false"   
  (seperator)
  (bright)
  (seperator) 
  (vol)
  (seperator)
  (wifi)
  (seperator)
  (bat)))

;;dynamic workspaces (copied from hyprland docs maybe change names from ws's)
(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/scripts/eww/change_active_workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :class "workspace" :space-evenly true :spacing 4
    (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label  :text "${workspace.id}")))))))

(defwidget bat []
  (box :orientation "h" 
    (label :class "bat" :text battery :tooltip "Battery: ${battery-cappacity}%")))

(defwidget cal []
  (box :class "cal-box" :orientation "h"  
    (calendar :class "cal")))

(defwidget time []
  (box :orientation "h" :class "time" 
    (button :onclick "bash ~/.config/scripts/eww/open_calendar" time)))

(defwidget wifi []
  (box :orientation "h" :tooltip wifi-name 
    (button :onclick "bash ~/.config/scripts/eww/wifi nmtui" 
            :class "wifi-icon" wifi-icon))) 

(defwidget seperator []
  (label :class "sep" :text "|"))

(defwidget bright []
  (eventbox :onhover "${eww} update br_show=true" 
            :onhoverlost "${eww} update br_show=false"
    (box :class "bright-box" :space-evenly "false" :orientation "h" :spacing 18 
      (label :text "")
     	(revealer :transition "slideleft" :reveal br_show :duration "350ms"
	     (scale :class "brightctl" :value bright :orientation "h":max 100 :min 0
                :onchange {br_show ? "xbacklight -set {}" : ""} )))))

(defwidget vol []
  (eventbox :onhover "${eww} update vol_show=true" 
            :onhoverlost "${eww} update vol_show=false" 
    (box :class "bright-box" :space-evenly "false" :orientation "h" :spacing 18
      (label :text {vol_show ? " " : unsilenced ? vol+" 󰕾" : "󰖁"})
      (label :text {vol_show ? "" : unmuted ? mic_vol+ " " : ""})
;;{vol_show ? "" : unsilenced ? vol+" 󰕾" : "󰖁"})
;; +{vol_show ? "" : unmuted ? vol_mic + "" : ""}  
      (revealer :transition "slideleft" :reveal vol_show :duration "350ms"
        (box :space-evenly "false" :orientation "h"
          (button :onclick "amixer set Master toggle" 
                  :class "volume-icon" { unsilenced ? "󰕾" : "󰖁"})
	      (scale :class "volctl" :value vol :orientation "h" :max 100 :min 0
                 :onchange "amixer set Master {}%" )
          (button :onclick "amixer set Capture toggle" 
                  :class "mic-icon" { unmuted ? " " : " "})
          (scale :class "micctl" :value mic_vol :orientation "h" :max 100 :min 0
            :onchange "amixer set Capture {}%"))))))


(defwidget launchbar []
  (box :class "eww-bar" :orientation "h" :valign "false" :halign "false"
    (button :onclick "hyprctl dispatch exec firefox" )
    (button :onclick "hyprctl dispatch exec firefox" )))

(defwidget powermenu []
  (box :orientation "h" :class "powermenu"
    "hi"))
